name: Move Assigned Issue to In Progress

on:
  issues:
    types: [assigned]

jobs:
  move:
    name: Move
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In Progress
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_MOVE }}
          PROJECT_NUMBER: <номер_вашего_проекта>
          COLUMN_NAME: "In Progress"
        run: |
          issue_id=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $issue: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  id
                }
              }
            }' -f owner=${{ github.repository_owner }} -f repo=${{ github.event.repository.name }} -f issue=${{ github.event.issue.number }} --jq '.data.repository.issue.id')
          
          project_id=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f org=${{ github.repository_owner }} -f number=${{ env.PROJECT_NUMBER }} --jq '.data.organization.projectV2.id')

          gh api graphql -f query='
            mutation($project: ID!, $item: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $item}) {
                item {
                  id
                }
              }
            }' -f project=$project_id -f item=$issue_id

          field_id=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f project=$project_id --jq '.data.node.fields.nodes[] | select(.name == "Status") | .id')

          option_id=$(gh api graphql -f query='
            query($project: ID!, $field: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  field(id: $field) {
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f project=$project_id -f field=$field_id --jq --arg column "${{ env.COLUMN_NAME }}" '.data.node.field.options[] | select(.name == $column) | .id')

          gh api graphql -f query='
            mutation($item: ID!, $field: ID!, $option: ID!) {
              updateProjectV2ItemFieldValue(input: {itemId: $item, fieldId: $field, singleSelectOptionId: $option}) {
                projectV2Item {
                  id
                }
              }
            }' -f item=$issue_id -f field=$field_id -f option=$option_id
